{
  "manifest": {
    "name": "uid",
    "version": "2.0.1",
    "repository": {
      "type": "git",
      "url": "https://github.com/lukeed/uid.git"
    },
    "description": "A tiny (130B to 205B) and fast utility to randomize unique IDs of fixed length",
    "unpkg": "dist/index.min.js",
    "module": "dist/index.mjs",
    "main": "dist/index.js",
    "types": "index.d.ts",
    "license": "MIT",
    "author": {
      "name": "Luke Edwards",
      "email": "luke.edwards05@gmail.com",
      "url": "https://lukeed.com"
    },
    "engines": {
      "node": ">=8"
    },
    "scripts": {
      "build": "bundt",
      "test": "uvu -r esm test -i collisions"
    },
    "exports": {
      ".": {
        "types": "./index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.js"
      },
      "./single": {
        "types": "./single/index.d.ts",
        "import": "./single/index.mjs",
        "require": "./single/index.js"
      },
      "./secure": {
        "types": "./secure/index.d.ts",
        "import": "./secure/index.mjs",
        "require": "./secure/index.js"
      },
      "./package.json": "./package.json"
    },
    "files": [
      "*.d.ts",
      "single",
      "secure",
      "dist"
    ],
    "keywords": [
      "id",
      "uid",
      "uuid",
      "random",
      "generate",
      "secure",
      "crypto",
      "foid"
    ],
    "modes": {
      "secure": "src/secure.js",
      "default": "src/index.js",
      "single": "src/single.js"
    },
    "dependencies": {
      "@lukeed/csprng": "^1.0.0"
    },
    "devDependencies": {
      "bundt": "1.1.1",
      "esm": "3.2.25",
      "uvu": "0.3.4"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-uid-2.0.1-a3f57c962828ea65256cd622fc363028cdf4526b-integrity/node_modules/uid/package.json",
    "readmeFilename": "readme.md",
    "readme": "# uid [![CI](https://github.com/lukeed/uid/workflows/CI/badge.svg)](https://github.com/lukeed/uid/actions) [![codecov](https://badgen.now.sh/codecov/c/github/lukeed/uid)](https://codecov.io/gh/lukeed/uid)\n\n> A tiny (130B to 205B) and [fast](#benchmarks) utility to randomize unique IDs of fixed length\n\n_**Fast object IDs.** Available for Node.js and the browser._<br>Generate **randomized** output strings of fixed length using lowercase alphanumeric characters (`a-z0-9`). To produce IDs in UUID.V4 format, please see [`@lukeed/uuid`](https://github.com/lukeed/uuid).\n\nThis module offers multiple [modes](#modes) for your needs:\n\n* [`uid`](#uid)<br>_The default is \"non-secure\", which uses `Math.random` to produce UUIDs._\n* [`uid/secure`](#uidsecure)<br>_The \"secure\" mode produces cryptographically secure (CSPRNG) UUIDs using the current environment's `crypto` module._\n* [`uid/single`](#uidsingle)<br>_The \"single\" mode does not maintain an internal cache, which makes it ideal for short-lived environments._\n\nAdditionally, this module is preconfigured for native ESM support in Node.js with fallback to CommonJS. It will also work with any Rollup and webpack configuration, regardless of the \"mode\" selected.\n\n## Install\n\n```\n$ npm install --save uid\n```\n\n## Modes\n\nThere are three \"versions\" of `uid` available:\n\n#### `uid`\n> **Size (gzip):** 174 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/uid/dist/index.js), [ES Module](https://unpkg.com/uid/dist/index.mjs), [UMD](https://unpkg.com/uid/dist/index.min.js)\n\nRelies on `Math.random`, which means that, while faster, this mode **is not** cryptographically secure. <br>Works in Node.js and all browsers.\n\n#### `uid/secure`\n> **Size (gzip):** 205 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/uid/secure/index.js), [ES Module](https://unpkg.com/uid/secure/index.mjs), [UMD](https://unpkg.com/uid/secure/index.min.js)\n\nRelies on the environment's `crypto` module in order to produce cryptographically secure (CSPRNG) values. <br>Works in all versions of Node.js. Works in all browsers with [`crypto.getRandomValues()` support](https://caniuse.com/#feat=getrandomvalues).\n\n#### `uid/single`\n> **Size (gzip):** 131 bytes<br>\n> **Availability:** [CommonJS](https://unpkg.com/uid/single/index.js), [ES Module](https://unpkg.com/uid/single/index.mjs), [UMD](https://unpkg.com/uid/single/index.min.js)\n\nRelies on `Math.random`, which means that this mode **is not** cryptographically secure. <br>Does **not** maintain an internal buffer, which makes this mode ideal for single-use and/or short-lived environments. <br>Works in Node.js and all browsers.\n\n\n## Usage\n\n```js\nimport { uid } from 'uid';\n// or: import { uid } from 'uid/secure';\n// or: import { uid } from 'uid/single';\n\n// length = 11 (default)\nuid(); //=> 'fsm2vsgo1pr'\nuid(); //=> 'gf34sezvoh6'\n\n// customize length\nuid(16); //=> 'zbb6cc3ay26omrdz'\nuid(25); //=> 'lljjmo3f39rnjudsgqvzta1rb'\nuid(32); //=> 'yrfiw88qlq1fgpm40lguz6u43gksfj4a'\n```\n\n\n## API\n\n### uid(length?)\nReturns: `String`\n\nCreates a new random identifer of fixed length.\n\n#### length\nType: `Number`<br>\nDefault: `11`\n\nThen length of the output string.\n\n> **Important:** Your risk of collisions decreases with longer strings!\n\n\n## Benchmarks\n\nYou can run the benchmark(s) yourself via the [`/bench`](/bench) directory.\n\nAll items listed pass a validation step for length and uniqueness. <br>\nItems marked with a `†` are cryptographically secure (via CSPRNG).\n\n\n> Running on Node.js v12.18.4\n\n```\nBenchmark (length = 11):\n  hashids/fixed        x   387,306 ops/sec ±1.03% (92 runs sampled)\n  nanoid/non-secure    x  5,338,433 ops/sec ±0.20% (95 runs sampled)\n† nanoid               x  2,705,158 ops/sec ±0.31% (95 runs sampled)\n† uid/secure           x  9,648,755 ops/sec ±0.18% (96 runs sampled)\n  uid/single           x  4,843,529 ops/sec ±0.19% (96 runs sampled)\n  uid                  x 21,276,788 ops/sec ±0.37% (94 runs sampled)\n\nBenchmark (length = 16):\n  hashids/fixed        x    409,228 ops/sec ±0.36% (98 runs sampled)\n  nanoid/non-secure    x  3,643,896 ops/sec ±1.27% (96 runs sampled)\n† nanoid               x  2,273,555 ops/sec ±0.15% (95 runs sampled)\n† uid/secure           x  9,167,545 ops/sec ±0.32% (95 runs sampled)\n  uid/single           x  3,624,579 ops/sec ±0.29% (95 runs sampled)\n  uid                  x 24,770,463 ops/sec ±0.41% (97 runs sampled)\n\nBenchmark (length = 25):\n  cuid                 x    177,241 ops/sec ±1.38% (91 runs sampled)\n  hashids/fixed        x    396,013 ops/sec ±0.21% (98 runs sampled)\n  nanoid/non-secure    x  2,477,463 ops/sec ±0.37% (96 runs sampled)\n† nanoid               x  1,794,062 ops/sec ±0.18% (97 runs sampled)\n† uid/secure           x  3,778,663 ops/sec ±0.16% (95 runs sampled)\n  uid/single           x  2,428,167 ops/sec ±0.27% (96 runs sampled)\n  uid                  x 24,580,091 ops/sec ±0.31% (96 runs sampled)\n\nBenchmark (length = 36):\n  uuid/v1              x  1,738,574 ops/sec ±0.36% (97 runs sampled)\n  uuid/v4              x  1,276,888 ops/sec ±0.26% (94 runs sampled)\n  hashids/fixed        x    374,294 ops/sec ±0.14% (98 runs sampled)\n  nanoid/non-secure    x  1,816,630 ops/sec ±0.31% (97 runs sampled)\n† nanoid               x  1,364,928 ops/sec ±0.18% (95 runs sampled)\n† @lukeed/uuid/secure  x  5,144,752 ops/sec ±0.28% (93 runs sampled)\n  @lukeed/uuid         x  5,950,932 ops/sec ±0.53% (95 runs sampled)\n† uid/secure           x  5,163,209 ops/sec ±0.32% (96 runs sampled)\n  uid/single           x  1,755,748 ops/sec ±0.24% (99 runs sampled)\n  uid                  x 20,166,119 ops/sec ±0.66% (94 runs sampled)\n```\n\n> Running on Chrome 85.0.4183.121\n\n```\nBenchmark (length = 11):\n  hashids/fixed        x    369,393 ops/sec ±1.04% (67 runs sampled)\n  nanoid/non-secure    x  4,741,795 ops/sec ±0.67% (68 runs sampled)\n† nanoid               x    176,138 ops/sec ±7.17% (57 runs sampled)\n† uid/secure           x  2,061,703 ops/sec ±3.95% (65 runs sampled)\n  uid/single           x  4,547,527 ops/sec ±0.29% (67 runs sampled)\n  uid                  x 21,073,518 ops/sec ±0.60% (67 runs sampled)\n\nBenchmark (length = 16):\n  hashids/fixed        x    362,882 ops/sec ±0.25% (67 runs sampled)\n  nanoid/non-secure    x  3,245,036 ops/sec ±1.05% (67 runs sampled)\n† nanoid               x    165,535 ops/sec ±5.21% (59 runs sampled)\n† uid/secure           x  1,676,705 ops/sec ±0.25% (68 runs sampled)\n  uid/single           x  3,322,695 ops/sec ±0.49% (67 runs sampled)\n  uid                  x 24,074,441 ops/sec ±0.35% (67 runs sampled)\n\nBenchmark (length = 25):\n  cuid                 x     99,011 ops/sec ±6.09% (57 runs sampled)\n  hashids/fixed        x    349,187 ops/sec ±0.21% (68 runs sampled)\n  nanoid/non-secure    x  2,245,251 ops/sec ±1.21% (61 runs sampled)\n† nanoid               x    143,529 ops/sec ±4.53% (62 runs sampled)\n† uid/secure           x    936,133 ops/sec ±2.14% (67 runs sampled)\n  uid/single           x  2,276,265 ops/sec ±1.17% (66 runs sampled)\n  uid                  x 23,409,912 ops/sec ±1.81% (67 runs sampled)\n\nBenchmark (length = 36):\n  uuid/v1              x  1,695,352 ops/sec ±0.26% (67 runs sampled)\n  uuid/v4              x    294,032 ops/sec ±1.75% (63 runs sampled)\n  hashids/fixed        x    340,402 ops/sec ±0.37% (50 runs sampled)\n  nanoid/non-secure    x  1,611,905 ops/sec ±0.45% (66 runs sampled)\n† nanoid               x    118,006 ops/sec ±6.31% (52 runs sampled)\n† @lukeed/uuid/secure  x    859,592 ops/sec ±0.54% (67 runs sampled)\n  @lukeed/uuid         x  6,041,873 ops/sec ±0.33% (66 runs sampled)\n† uid/secure           x    776,658 ops/sec ±0.31% (56 runs sampled)\n  uid/single           x  1,646,199 ops/sec ±1.17% (66 runs sampled)\n  uid                  x 22,779,817 ops/sec ±0.66% (67 runs sampled)\n```\n\n## Performance\n\nThe reason `uid` and `uid/secure` are so much faster than its alternatives is two-fold:\n\n1) It composes an output with hexadecimal pairs (from a cached dictionary) instead of single characters.\n2) It allocates a larger Buffer/ArrayBuffer up front (expensive) and slices off chunks as needed (cheap).\n\nThe `uid/secure` module maintains an internal ArrayBuffer of 4096 bytes, which supplies **256** `uid()` invocations. However, the default module (`uid`) preallocates **512** invocations using less memory upfront. Both implementations will regenerate its internal allocation as needed.\n\nLarger buffers would result in higher performance over time, but I found these to be a good balance of performance and memory space.\n\n> **Note:** If you want to don't want to preallocate memory, and do not need a CSPRNG, check out the `uid/single` mode.\n\n\n## Related\n\n- [hexoid](https://github.com/lukeed/hexoid) - A slightly larger (190B) but extremely fast variant of this module with a different API\n- [@lukeed/uuid](https://github.com/lukeed/uuid) - A tiny (230B), fast, and cryptographically secure UUID (V4) generator for Node and the browser\n\n## Credits\n\nThank you [Matthew Mueller](https://github.com/matthewmueller) for gifting the `uid` name on npm.<br>\nThis module was previously known as `foid` (fast object IDs).\n\n## License\n\nMIT © [Luke Edwards](https://lukeed.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/uid/-/uid-2.0.1.tgz#a3f57c962828ea65256cd622fc363028cdf4526b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/uid/-/uid-2.0.1.tgz",
    "hash": "a3f57c962828ea65256cd622fc363028cdf4526b",
    "integrity": "sha512-PF+1AnZgycpAIEmNtjxGBVmKbZAQguaa4pBUq6KNaGEcpzZ2klCNZLM34tsjp76maN00TttiiUf6zkIBpJQm2A==",
    "registry": "npm",
    "packageName": "uid",
    "cacheIntegrity": "sha512-PF+1AnZgycpAIEmNtjxGBVmKbZAQguaa4pBUq6KNaGEcpzZ2klCNZLM34tsjp76maN00TttiiUf6zkIBpJQm2A== sha1-o/V8ligo6mUlbNYi/DYwKM30Ums="
  },
  "registry": "npm",
  "hash": "a3f57c962828ea65256cd622fc363028cdf4526b"
}