{
  "manifest": {
    "name": "iterare",
    "version": "1.2.1",
    "description": "Array methods for ES6 Iterators",
    "main": "lib/index.js",
    "typings": "lib/index.d.ts",
    "engines": {
      "node": ">=6"
    },
    "scripts": {
      "tslint": "tslint -c tslint.json -p tsconfig.json 'src/**/*.ts'",
      "prettier": "prettier --write --list-different '**/*.{ts,json,js,md,yml}'",
      "test": "nyc mocha",
      "build": "tsc",
      "watch": "tsc -w",
      "typedoc": "typedoc --out typedoc --tsconfig tsconfig.json --ignoreCompilerErrors --mode file --excludeExternals src",
      "semantic-release": "semantic-release"
    },
    "nyc": {
      "all": true,
      "extension": [
        ".ts"
      ],
      "include": [
        "src/**/*.ts"
      ],
      "exclude": [
        "src/**/*.test.ts"
      ],
      "reporter": [
        "text",
        "json"
      ]
    },
    "mocha": {
      "spec": "src/**/*.test.ts",
      "require": "ts-node/register"
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -e $HUSKY_GIT_PARAMS"
      }
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "keywords": [
      "iterator",
      "iteration",
      "functional",
      "es6",
      "collection",
      "array",
      "map",
      "set",
      "filter",
      "reduce",
      "flatten",
      "concat",
      "every",
      "some"
    ],
    "author": {
      "name": "Felix Becker",
      "email": "felix.b@outlook.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/felixfbecker/iterare"
    },
    "bugs": {
      "url": "https://github.com/felixfbecker/iterare/issues"
    },
    "license": "ISC",
    "devDependencies": {
      "@commitlint/cli": "^8.0.0",
      "@commitlint/config-conventional": "^8.0.0",
      "@reactivex/ix-es2015-cjs": "^2.5.3",
      "@types/benchmark": "^1.0.31",
      "@types/lodash": "^4.14.134",
      "@types/mocha": "^5.2.7",
      "@types/node": "^7.10.6",
      "benchmark": "^2.1.4",
      "husky": "^2.4.0",
      "ix": "^2.5.3",
      "lodash": "^4.17.11",
      "mocha": "^6.1.4",
      "nyc": "^14.1.1",
      "prettier": "^1.18.1",
      "rxjs": "^6.5.2",
      "semantic-release": "^15.13.12",
      "ts-node": "^8.2.0",
      "tslint": "^5.17.0",
      "tslint-config-prettier": "^1.18.0",
      "typedoc": "^0.14.2",
      "typescript": "~3.5.1"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-iterare-1.2.1-139c400ff7363690e33abffa33cbba8920f00042-integrity/node_modules/iterare/package.json",
    "readmeFilename": "README.md",
    "readme": "# iterare\n\n> lat. _to repeat, to iterate_\n\n[![npm](https://img.shields.io/npm/v/iterare.svg)](https://www.npmjs.com/package/iterare)\n[![downloads](https://img.shields.io/npm/dt/iterare.svg)](https://www.npmjs.com/package/iterare)\n[![build](https://travis-ci.org/felixfbecker/iterare.svg?branch=master)](https://travis-ci.org/felixfbecker/iterare)\n[![codecov](https://codecov.io/gh/felixfbecker/iterare/branch/master/graph/badge.svg)](https://codecov.io/gh/felixfbecker/iterare)\n[![dependencies](https://david-dm.org/felixfbecker/iterare/status.svg)](https://david-dm.org/felixfbecker/iterare)\n![node](http://img.shields.io/node/v/iterare.svg)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![license](https://img.shields.io/npm/l/iterare.svg)](https://github.com/felixfbecker/iterare/blob/master/LICENSE.txt)\n[![chat: on gitter](https://badges.gitter.im/felixfbecker/iterare.svg)](https://gitter.im/felixfbecker/iterare?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nES6 Iterator library for applying multiple transformations to a collection in a single iteration.\n\n## [API Documentation](http://iterare.surge.sh/)\n\n## Motivation\n\nEver wanted to iterate over ES6 collections like `Map` or `Set` with `Array`-built-ins like `map()`, `filter()`, `reduce()`?\nLets say you have a large `Set` of URIs and want to get a `Set` back that contains file paths from all `file://` URIs.\n\nThe loop solution is very clumsy and not very functional:\n\n```javascript\nconst uris = new Set(['file:///foo.txt', 'http:///npmjs.com', 'file:///bar/baz.txt'])\nconst paths = new Set()\nfor (const uri of uris) {\n  if (!uri.startsWith('file://')) {\n    continue\n  }\n  const path = uri.substr('file:///'.length)\n  paths.add(path)\n}\n```\n\nMuch more readable is converting the `Set` to an array, using its methods and then converting back:\n\n```javascript\nnew Set(\n  Array.from(uris)\n    .filter(uri => uri.startsWith('file://'))\n    .map(uri => uri.substr('file:///'.length))\n)\n```\n\nBut there is a problem: Instead of iterating once, you iterate 4 times (one time for converting, one time for filtering, one time for mapping, one time for converting back).\nFor a large Set with thousands of elements, this has significant overhead.\n\nOther libraries like RxJS or plain NodeJS streams would support these kinds of \"pipelines\" without multiple iterations, but they work only asynchronously.\n\nWith this library you can use many methods you know and love from `Array` and lodash while only iterating once - thanks to the ES6 [iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols):\n\n```javascript\nimport iterate from 'iterare'\n\niterate(uris)\n  .filter(uri => uri.startsWith('file://'))\n  .map(uri => uri.substr('file:///'.length))\n  .toSet()\n```\n\n`iterate` accepts any kind of Iterator or Iterable (arrays, collections, generators, ...) and returns a new Iterator object that can be passed to any Iterable-accepting function (collection constructors, `Array.from()`, `for of`, ...).\nOnly when you call a method like `toSet()`, `reduce()` or pass it to a `for of` loop will each value get pulled through the pipeline, and only once.\n\nThis library is essentially\n\n- RxJS, but fully synchronous\n- lodash, but with first-class support for ES6 collections.\n\n## Performance\n\nBenchmarks based on the examples above:\n\n### [`map` + `filter`](https://github.com/felixfbecker/iterare/blob/master/src/benchmarks/map_filter_set.ts)\n\nSimulate iterating over a very lage Set of strings and applying a filter and a map on it.\n\n| Method             |                              ops/sec |\n| ------------------ | -----------------------------------: |\n| Loop               | 466 ops/sec ±1.31% (84 runs sampled) |\n| **iterare**        | 397 ops/sec ±2.01% (81 runs sampled) |\n| RxJS               | 339 ops/sec ±0.77% (83 runs sampled) |\n| Array method chain | 257 ops/sec ±1.73% (79 runs sampled) |\n| Lodash             | 268 ops/sec ±0.84% (81 runs sampled) |\n| IxJS (ES6)         | 216 ops/sec ±0.81% (81 runs sampled) |\n| IxJS (ES5)         | 141 ops/sec ±0.87% (77 runs sampled) |\n\n### [`filter` + `take`](https://github.com/felixfbecker/iterare/blob/master/src/benchmarks/filter_take_set.ts)\n\nSimulate iterating over a very lage Set of strings and applying a filter on it, then taking only the first 1000 elements.\nA smart implementations should only apply the filter predicate to the first 5 elements.\n\n| Method             |                                    ops/sec |\n| ------------------ | -----------------------------------------: |\n| Loop               | 3,059,466 ops/sec ±0.75% (88 runs sampled) |\n| **iterare**        |   963,257 ops/sec ±0.68% (89 runs sampled) |\n| IxJS (ES6)         |   424,488 ops/sec ±0.63% (89 runs sampled) |\n| RxJS               |   168,853 ops/sec ±2.58% (86 runs sampled) |\n| IxJS (ES5)         |   107,961 ops/sec ±1.88% (78 runs sampled) |\n| Lodash             |     41.71 ops/sec ±1.15% (54 runs sampled) |\n| Array method chain |     24.74 ops/sec ±3.69% (45 runs sampled) |\n\n## Lazy Evaluation\n\nGoing a step further, if you only care about a specific number of elements in the end, only these elements will run through the pipeline:\n\n```javascript\niterate(collection)\n  .filter(uri => uri.startsWith('file://'))\n  .take(5)\n```\n\nIn this example, the filter predicate is called only until 5 elements have been found.\nThe alternative with an array would call it for every element in the collection:\n\n```javascript\nArray.from(collection)\n  .filter(uri => uri.startsWith('file://'))\n  .slice(0, 5)\n```\n\n## Contributing\n\nThe source is written in TypeScript.\n\n- `npm run build` compiles TS\n- `npm run watch` compiles on file changes\n- `npm test` runs tests\n- `node lib/benchmarks/____` runs a benchmark\n",
    "licenseText": "ISC License\n\nCopyright (c) 2016, Felix Frederick Becker\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/iterare/-/iterare-1.2.1.tgz#139c400ff7363690e33abffa33cbba8920f00042",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/iterare/-/iterare-1.2.1.tgz",
    "hash": "139c400ff7363690e33abffa33cbba8920f00042",
    "integrity": "sha512-RKYVTCjAnRthyJes037NX/IiqeidgN1xc3j1RjFfECFp28A1GVwK9nA+i0rJPaHqSZwygLzRnFlzUuHFoWWy+Q==",
    "registry": "npm",
    "packageName": "iterare",
    "cacheIntegrity": "sha512-RKYVTCjAnRthyJes037NX/IiqeidgN1xc3j1RjFfECFp28A1GVwK9nA+i0rJPaHqSZwygLzRnFlzUuHFoWWy+Q== sha1-E5xAD/c2NpDjOr/6M8u6iSDwAEI="
  },
  "registry": "npm",
  "hash": "139c400ff7363690e33abffa33cbba8920f00042"
}