{
  "manifest": {
    "name": "symbol-observable",
    "version": "4.0.0",
    "description": "Symbol.observable ponyfill",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/blesh/symbol-observable.git"
    },
    "author": {
      "name": "Ben Lesh",
      "email": "ben@benlesh.com"
    },
    "scripts": {
      "test": "npm run build && mocha && tsc && node ./ts-test/test.js && check-es3-syntax -p lib/ --kill",
      "build": "babel es --out-dir lib",
      "prepublish": "npm test"
    },
    "files": [
      "index.js",
      "ponyfill.js",
      "index.d.ts",
      "ponyfill.d.ts",
      "es/index.js",
      "es/ponyfill.js",
      "lib/index.js",
      "lib/ponyfill.js"
    ],
    "main": "lib/index.js",
    "module": "es/index.js",
    "jsnext:main": "es/index.js",
    "typings": "index.d.ts",
    "keywords": [
      "symbol",
      "observable",
      "observables",
      "ponyfill",
      "polyfill",
      "shim"
    ],
    "devDependencies": {
      "babel-cli": "^6.9.0",
      "babel-preset-es2015": "^6.9.0",
      "babel-preset-es3": "^1.0.0",
      "chai": "^3.5.0",
      "check-es3-syntax-cli": "^0.1.0",
      "mocha": "^2.4.5",
      "typescript": "^4.0.5"
    },
    "engines": {
      "node": ">=0.10"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-symbol-observable-4.0.0-5b425f192279e87f2f9b937ac8540d1984b39205-integrity/node_modules/symbol-observable/package.json",
    "readmeFilename": "README.md",
    "readme": "# symbol-observable [![Build Status](https://travis-ci.org/benlesh/symbol-observable.svg?branch=master)](https://travis-ci.org/benlesh/symbol-observable)\n\n> [`Symbol.observable`](https://github.com/zenparsing/es-observable) [pony/polyfill](https://ponyfill.com)\n\nThis will polyfill `Symbol.observable` if `Symbol` exists, but will not polyfill `Symbol` if it doesn't exist. Meant to be used as a \"ponyfill\", meaning you're meant to use the module's exported symbol value as described below. This is all done to ensure that everyone is using the same version of the symbol (or string depending on the environment), as per the nature of symbols in JavaScript.\n\n\n## Install\n\n```\n$ npm install --save symbol-observable\n```\n\n\n## Basic Usage\n\n```js\nconst symbolObservable = require('symbol-observable').default;\n\nconsole.log(symbolObservable);\n//=> Symbol(observable)\n```\n\n```ts\nimport Symbol_observable from 'symbol-observable';\n\nconsole.log(Symbol_observable);\n//=> Symbol(observable)\n```\n\n## Making an object \"observable\":\n\nYou can do something like what you see below to make any object \"observable\" by libraries like RxJS, XStream and Most.js.\n\nThings to know:\n\n1. It's best if you just use one of the above libraries.\n2. If you're not, but sure you never `next`, `error` or `complete` on your observer after `error` or `complete` was called.\n3. Likewise, make sure you don't `next`, `error` or `complete` after `unsubscribe` is called on the returned object.\n\n```ts\nimport Symbol_observable from 'symbol-observable';\n\nsomeObject[Symbol_observable] = () => {\n  return {\n    subscribe(observer) {\n      const handler = e => observer.next(e);\n      someObject.addEventListener('data', handler);\n      return {\n        unsubscribe() {\n          someObject.removeEventListener('data', handler);\n        }\n      }\n    },\n    [Symbol_observable]() { return this }\n  }\n}\n```\n\nOften, it's not very hard, but it can get tricky in some cases.\n\n## Related\n\n- [is-observable](https://github.com/sindresorhus/is-observable) - Check if a value is an Observable\n- [observable-to-promise](https://github.com/sindresorhus/observable-to-promise) - Convert an Observable to a Promise\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com) and [Ben Lesh](https://github.com/benlesh)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2021 Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\nCopyright (c) 2021 Ben Lesh <ben@benlesh.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/symbol-observable/-/symbol-observable-4.0.0.tgz#5b425f192279e87f2f9b937ac8540d1984b39205",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/symbol-observable/-/symbol-observable-4.0.0.tgz",
    "hash": "5b425f192279e87f2f9b937ac8540d1984b39205",
    "integrity": "sha512-b19dMThMV4HVFynSAM1++gBHAbk2Tc/osgLIBZMKsyqh34jb2e8Os7T6ZW/Bt3pJFdBTd2JwAnAAEQV7rSNvcQ==",
    "registry": "npm",
    "packageName": "symbol-observable",
    "cacheIntegrity": "sha512-b19dMThMV4HVFynSAM1++gBHAbk2Tc/osgLIBZMKsyqh34jb2e8Os7T6ZW/Bt3pJFdBTd2JwAnAAEQV7rSNvcQ== sha1-W0JfGSJ56H8vm5N6yFQNGYSzkgU="
  },
  "registry": "npm",
  "hash": "5b425f192279e87f2f9b937ac8540d1984b39205"
}