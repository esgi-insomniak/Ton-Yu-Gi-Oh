{
  "manifest": {
    "name": "fast-safe-stringify",
    "version": "2.1.1",
    "description": "Safely and quickly serialize JavaScript objects",
    "keywords": [
      "stable",
      "stringify",
      "JSON",
      "JSON.stringify",
      "safe",
      "serialize"
    ],
    "main": "index.js",
    "scripts": {
      "test": "standard && tap --no-esm test.js test-stable.js",
      "benchmark": "node benchmark.js"
    },
    "author": {
      "name": "David Mark Clements"
    },
    "contributors": [
      {
        "name": "Ruben Bridgewater"
      },
      {
        "name": "Matteo Collina"
      },
      {
        "name": "Ben Gourley"
      },
      {
        "name": "Gabriel Lesperance"
      },
      {
        "name": "Alex Liu"
      },
      {
        "name": "Christoph Walcher"
      },
      {
        "name": "Nicholas Young"
      }
    ],
    "license": "MIT",
    "typings": "index",
    "devDependencies": {
      "benchmark": "^2.1.4",
      "clone": "^2.1.0",
      "json-stringify-safe": "^5.0.1",
      "standard": "^11.0.0",
      "tap": "^12.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidmarkclements/fast-safe-stringify.git"
    },
    "bugs": {
      "url": "https://github.com/davidmarkclements/fast-safe-stringify/issues"
    },
    "homepage": "https://github.com/davidmarkclements/fast-safe-stringify#readme",
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v6/npm-fast-safe-stringify-2.1.1-c406a83b6e70d9e35ce3b30a81141df30aeba884-integrity/node_modules/fast-safe-stringify/package.json",
    "readmeFilename": "readme.md",
    "readme": "# fast-safe-stringify\n\nSafe and fast serialization alternative to [JSON.stringify][].\n\nGracefully handles circular structures instead of throwing in most cases.\nIt could return an error string if the circular object is too complex to analyze,\ne.g. in case there are proxies involved.\n\nProvides a deterministic (\"stable\") version as well that will also gracefully\nhandle circular structures. See the example below for further information.\n\n## Usage\n\nThe same as [JSON.stringify][].\n\n`stringify(value[, replacer[, space[, options]]])`\n\n```js\nconst safeStringify = require('fast-safe-stringify')\nconst o = { a: 1 }\no.o = o\n\nconsole.log(safeStringify(o))\n// '{\"a\":1,\"o\":\"[Circular]\"}'\nconsole.log(JSON.stringify(o))\n// TypeError: Converting circular structure to JSON\n\nfunction replacer(key, value) {\n  console.log('Key:', JSON.stringify(key), 'Value:', JSON.stringify(value))\n  // Remove the circular structure\n  if (value === '[Circular]') {\n    return\n  }\n  return value\n}\n\n// those are also defaults limits when no options object is passed into safeStringify\n// configure it to lower the limit.\nconst options = {\n  depthLimit: Number.MAX_SAFE_INTEGER,\n  edgesLimit: Number.MAX_SAFE_INTEGER\n};\n\nconst serialized = safeStringify(o, replacer, 2, options)\n// Key: \"\" Value: {\"a\":1,\"o\":\"[Circular]\"}\n// Key: \"a\" Value: 1\n// Key: \"o\" Value: \"[Circular]\"\nconsole.log(serialized)\n// {\n//  \"a\": 1\n// }\n```\n\n\nUsing the deterministic version also works the same:\n\n```js\nconst safeStringify = require('fast-safe-stringify')\nconst o = { b: 1, a: 0 }\no.o = o\n\nconsole.log(safeStringify(o))\n// '{\"b\":1,\"a\":0,\"o\":\"[Circular]\"}'\nconsole.log(safeStringify.stableStringify(o))\n// '{\"a\":0,\"b\":1,\"o\":\"[Circular]\"}'\nconsole.log(JSON.stringify(o))\n// TypeError: Converting circular structure to JSON\n```\n\nA faster and side-effect free implementation is available in the\n[safe-stable-stringify][] module. However it is still considered experimental\ndue to a new and more complex implementation.\n\n### Replace strings constants\n\n- `[Circular]` - when same reference is found\n- `[...]` - when some limit from options object is reached\n\n## Differences to JSON.stringify\n\nIn general the behavior is identical to [JSON.stringify][]. The [`replacer`][]\nand [`space`][] options are also available.\n\nA few exceptions exist to [JSON.stringify][] while using [`toJSON`][] or\n[`replacer`][]:\n\n### Regular safe stringify\n\n- Manipulating a circular structure of the passed in value in a `toJSON` or the\n  `replacer` is not possible! It is possible for any other value and property.\n\n- In case a circular structure is detected and the [`replacer`][] is used it\n  will receive the string `[Circular]` as the argument instead of the circular\n  object itself.\n\n### Deterministic (\"stable\") safe stringify\n\n- Manipulating the input object either in a [`toJSON`][] or the [`replacer`][]\n  function will not have any effect on the output. The output entirely relies on\n  the shape the input value had at the point passed to the stringify function!\n\n- In case a circular structure is detected and the [`replacer`][] is used it\n  will receive the string `[Circular]` as the argument instead of the circular\n  object itself.\n\nA side effect free variation without these limitations can be found as well\n([`safe-stable-stringify`][]). It is also faster than the current\nimplementation. It is still considered experimental due to a new and more\ncomplex implementation.\n\n## Benchmarks\n\nAlthough not JSON, the Node.js `util.inspect` method can be used for similar\npurposes (e.g. logging) and also handles circular references.\n\nHere we compare `fast-safe-stringify` with some alternatives:\n(Lenovo T450s with a i7-5600U CPU using Node.js 8.9.4)\n\n```md\nfast-safe-stringify:   simple object x 1,121,497 ops/sec ±0.75% (97 runs sampled)\nfast-safe-stringify:   circular      x 560,126 ops/sec ±0.64% (96 runs sampled)\nfast-safe-stringify:   deep          x 32,472 ops/sec ±0.57% (95 runs sampled)\nfast-safe-stringify:   deep circular x 32,513 ops/sec ±0.80% (92 runs sampled)\n\nutil.inspect:          simple object x 272,837 ops/sec ±1.48% (90 runs sampled)\nutil.inspect:          circular      x 116,896 ops/sec ±1.19% (95 runs sampled)\nutil.inspect:          deep          x 19,382 ops/sec ±0.66% (92 runs sampled)\nutil.inspect:          deep circular x 18,717 ops/sec ±0.63% (96 runs sampled)\n\njson-stringify-safe:   simple object x 233,621 ops/sec ±0.97% (94 runs sampled)\njson-stringify-safe:   circular      x 110,409 ops/sec ±1.85% (95 runs sampled)\njson-stringify-safe:   deep          x 8,705 ops/sec ±0.87% (96 runs sampled)\njson-stringify-safe:   deep circular x 8,336 ops/sec ±2.20% (93 runs sampled)\n```\n\nFor stable stringify comparisons, see the performance benchmarks in the\n[`safe-stable-stringify`][] readme.\n\n## Protip\n\nWhether `fast-safe-stringify` or alternatives are used: if the use case\nconsists of deeply nested objects without circular references the following\npattern will give best results.\nShallow or one level nested objects on the other hand will slow down with it.\nIt is entirely dependant on the use case.\n\n```js\nconst stringify = require('fast-safe-stringify')\n\nfunction tryJSONStringify (obj) {\n  try { return JSON.stringify(obj) } catch (_) {}\n}\n\nconst serializedString = tryJSONStringify(deep) || stringify(deep)\n```\n\n## Acknowledgements\n\nSponsored by [nearForm](http://nearform.com)\n\n## License\n\nMIT\n\n[`replacer`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20replacer%20parameter\n[`safe-stable-stringify`]: https://github.com/BridgeAR/safe-stable-stringify\n[`space`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The%20space%20argument\n[`toJSON`]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior\n[benchmark]: https://github.com/epoberezkin/fast-json-stable-stringify/blob/67f688f7441010cfef91a6147280cc501701e83b/benchmark\n[JSON.stringify]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Mark Clements\nCopyright (c) 2017 David Mark Clements & Matteo Collina\nCopyright (c) 2018 David Mark Clements, Matteo Collina & Ruben Bridgewater \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz#c406a83b6e70d9e35ce3b30a81141df30aeba884",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
    "hash": "c406a83b6e70d9e35ce3b30a81141df30aeba884",
    "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
    "registry": "npm",
    "packageName": "fast-safe-stringify",
    "cacheIntegrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA== sha1-xAaoO25w2eNc47MKgRQd8wrrqIQ="
  },
  "registry": "npm",
  "hash": "c406a83b6e70d9e35ce3b30a81141df30aeba884"
}